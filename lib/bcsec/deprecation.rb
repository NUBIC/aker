require 'bcsec'
require 'rubygems/version'

module Bcsec
  ##
  # Defines deprecation warnings and errors for pieces of the
  # library which are being phased out.
  #
  # This is an internal API in Bcsec.  If there's a use for it
  # outside, it could be factored out.
  module Deprecation
    class << self
      ##
      # An object which determines what will happen to the messages
      # generated by {.notify notify}.  It should respond to one
      # method; see {StderrMode#report StderrMode} for details.
      #
      # The default is an instance of {StderrMode}.
      #
      # @return [#report]
      attr_accessor :mode

      def mode
        @mode ||= default_mode
      end

      ##
      # Indicates that the method it was called from is deprecated and
      # could be removed as of the specified version.
      #
      # @return [void]
      def notify(message, version)
        level = determine_level(version)
        mode.report(level,
                    full_message_for(level, message, version,
                                     caller[1].split('/').last.split(':')[0,2].join(':')),
                    version)
      end

      private

      def default_mode
        StderrMode.new
      end

      def determine_level(version)
        if Gem::Version.new(version) <= Gem::Version.new(Bcsec::VERSION)
          :obsolete
        else
          :deprecated
        end
      end

      def full_message_for(level, message, version, line)
        sprintf "%s: #{message}  %s  (Called from #{line}.)" %
          (case level
           when :deprecated
             ["DEPRECATION WARNING",
              "It will be removed from bcsec in version #{version} or later."]
           when :obsolete
             ["OBSOLETE API USED",
              "It is no longer functional as of bcsec #{version} " <<
              "and could be removed in any future version."]
           else
             raise "Unexpected level: #{level.inspect}"
           end)
      end
    end

    ##
    # The default deprecation handler for Bcsec.  When a deprecated
    # method is invoked, it does one of two things:
    #
    # * If the method is only deprecated (i.e., slated for removal in
    #   a future release), it prints a warning to standard error.
    # * If a method's deprecation version is passed, it throws an
    #   {ObsoleteError}.
    #
    # The motivation of the latter behavior is to force users to
    # remove obsolete code before the hints about what to replace it
    # with are removed.
    class StderrMode
      ##
      # @param [:deprecated, :obsolete] level whether the called
      #   method is merely slated for removal or actually removed.
      # @param [String] message the actual message, including information
      #   describing the level
      # @param [String] version the version at which the code becomes
      #   obsolete
      #
      # @return [void]
      def report(level, message, version)
        case level
        when :deprecated; $stderr.puts message;
        when :obsolete; raise ObsoleteError.new(message)
        end
      end
    end

    ##
    # The error thrown by {Bcsec::Deprecation::StderrMode} when
    # obsolete code is invoked.
    class ObsoleteError < StandardError; end
  end
end
